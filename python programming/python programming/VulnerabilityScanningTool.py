import socket
import requests
from datetime import datetime

def scan_open_ports(target, port_range=(1, 1024)):
    open_ports = []
    print(f"Scanning open ports on {target}...")
    
    for port in range(port_range[0], port_range[1] + 1):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        result = s.connect_ex((target, port))
        if result == 0:
            open_ports.append(port)
        s.close()

    return open_ports

def check_software_versions(url):
    try:
        response = requests.get(url)
        headers = response.headers
        server_info = headers.get('Server')
        if server_info:
            print(f"Server information: {server_info}")
            # This is a simple example. In a real-world application, you would compare this version against a database of known vulnerabilities.
        else:
            print("No server information found in headers.")
    except requests.RequestException as e:
        print(f"Error checking software version: {e}")

def check_misconfigurations(url):
    misconfigurations = []
    try:
        response = requests.get(url)
        if 'X-Content-Type-Options' not in response.headers:
            misconfigurations.append('Missing X-Content-Type-Options header')
        if 'X-Frame-Options' not in response.headers:
            misconfigurations.append('Missing X-Frame-Options header')
        if 'Content-Security-Policy' not in response.headers:
            misconfigurations.append('Missing Content-Security-Policy header')
    except requests.RequestException as e:
        print(f"Error checking misconfigurations: {e}")

    return misconfigurations

def main():
    target = input("Enter the target domain or IP address: ")
    port_range = input("Enter the port range to scan (default 1-1024): ") or "1-1024"
    start_port, end_port = map(int, port_range.split('-'))
    
    # Scan for open ports
    open_ports = scan_open_ports(target, (start_port, end_port))
    print(f"Open ports on {target}: {open_ports}")
    
    # Check for outdated software versions
    url = f"http://{target}"
    check_software_versions(url)
    
    # Check for common misconfigurations
    misconfigurations = check_misconfigurations(url)
    if misconfigurations:
        print(f"Found misconfigurations on {url}:")
        for misconfiguration in misconfigurations:
            print(f"- {misconfiguration}")
    else:
        print(f"No misconfigurations found on {url}.")

if __name__ == "__main__":
    main()
